.exit
exit
console.log(5);
});
  rl.close();
  rollNumberInfo.printInfo();
  rollNumberInfo.parseRollNumber(rollNumber);
  const rollNumberInfo = new RollNumberInfo();
rl.question('Enter Your Roll Number : ', (rollNumber) => {
});
  output: process.stdout
  input: process.stdin,
const rl = require('readline').createInterface({
}
  }
    console.log('Year       : ' + this.year);
    console.log('Branch     : ' + this.branch);
    console.log('Department : ' + this.department);
  printInfo() {
  }
    this.year = '20' + rollNumber.slice(4, 6);
    }
      this.branch = values[1];
      this.department = values[0];
    if (values) {
    const values = this.dbhash.get(key);
    const key = [first, sec].join(',');
    const sec = rollNumber.slice(3, 4);
    const first = rollNumber.slice(0, 3);
  parseRollNumber(rollNumber) {
  }
    this.dbhash.set(key.join(','), value);
  addEntry(key, value) {
  }
    this.addEntry(['209', '1'], ['Chemical', 'Chemical']);
    this.addEntry(['208', '1'], ['Mechanical', 'Mechanical']);
    this.addEntry(['207', '1'], ['CSE', 'CSE']);
    this.addEntry(['206', '1'], ['Architecture', 'Architecture']);
    this.addEntry(['205', '3'], ['CA', 'MTECH']);
    this.addEntry(['205', '2'], ['CA', 'MSC']);
    this.addEntry(['205', '1'], ['CA', 'MCA']);
  initializeDB() {
  }
    this.initializeDB();
    this.dbhash = new Map();
    this.year = 'NA';
    this.branch = 'NA';
    this.department = 'NA';
  constructor() {
class RollNumberInfo {
v